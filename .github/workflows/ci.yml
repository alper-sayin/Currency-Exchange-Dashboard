name: CI Pipeline

# Define when the workflow should run
on:
  push:
    branches: [main, test/ci-workflow]
    paths:
      - "backend/**" # Only when backend files change
      - "frontend/**" # Only when frontend files change
  pull_request:
    branches: [main]
    paths:
      - "backend/**"
      - "frontend/**"
  workflow_dispatch: # Allows manual trigger from GitHub UI

# Define environment variables used across all jobs
env:
  NODE_VERSION: "20.x"
  PYTHON_VERSION: "3.x"

# Define the jobs to run
jobs:
  filter:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      backend: ${{ steps.paths.outputs.backend }}
      frontend: ${{ steps.paths.outputs.frontend }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v3
        id: paths
        with:
          base: ${{ github.ref }}
          filters: |
            backend:
              - 'backend/**'
              - 'pytest.ini'
              - 'manage.py'
            frontend:
              - 'frontend/**'

  backend:
    needs: filter
    if: needs.filter.outputs.backend == 'true'
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: simple
          POSTGRES_DB: test_currency_exchange
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Run Tests
        env:
          DB_PASSWORD: simple
          DB_HOST: localhost
        run: pytest

  frontend:
    needs: filter
    if: needs.filter.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run Tests
        run: |
          cd frontend
          npm test -- --watchAll=false

  notify:
    name: Notification
    needs: [filter, backend, frontend]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check test results
        if: contains(needs.*.result, 'failure')
        run: exit 1
